/* eslint-disable prefer-object-spread */
import React, { useState } from "react";
import "./PdfViewer.scss";
import Demo from "./Grid/Demo";
import { Input, Select, message, Button, Drawer, Divider, Spin } from "antd";
import { SearchOutlined, ArrowRightOutlined, LoadingOutlined } from "@ant-design/icons";
import GoogleAutoComplete from "../../../Common/AutoComplete/GoggleAutoComplete";
import FilterDetails from "./FilterDetails/FilterDetails";
import { common } from "../../../services/Common";
import { useNavigate } from "react-router-dom";
import { addplotdetails } from "../../../store/poltDetails/poltDetailsSlice";
import { useDispatch } from "react-redux";
import DyamicProperty from "../PlotPriceDetails/components/DyamicProperty/DyamicProperty";

const { Option } = Select;

const PdfViewer = () => {
  const navigate = useNavigate();
  const [visible, setVisible] = useState(false);
  const [placement, setPlacement] = useState("top");
  const [planresinfo, setPlanresinfo] = useState("");
  const [loaded, setLoaded] = useState(false);
  const [isdynamic, setIsdynamic] = useState(false);
  const [dynamiclayout, setDynamiclayout] = useState(
    [
    {
      i: "BedRoom1",
      x: 1,
      y: 0,
      w: 2,
      h: 2,
      // maxW: 2,
    },
    { i: "Dinning", x: 3, y: 0, w: 2, h: 2 },
    { i: "Kitchen", x: 5, y: 0, w: 2, h: 2, maxW: 2 },
    { i: "BedRoom2", x: 1, y: 2, w: 2, h: 2 },
    { i: "LivingRoom1", x: 3, y: 1, w: 3, h: 2 },
    { i: "Carparking", x: 6, y: 1, w: 1, h: 2, maxW: 1 },
    ]
  );
  const [searchfilterData, setSearchfilterData] = useState([]);
  const [Searchfilter, setSearchfilter] = useState({
    lat: "",
    long: "",
    facing: undefined,
    length: "",
    breadth: "",
  });
  const { lat, length, breadth, facing } = Searchfilter;

  const dispatch = useDispatch();
console.log("isdynamic", isdynamic);

  const onClose = () => {
    setVisible(false);
  };

  function selectProps(...props) {
    return function (obj) {
      const newObj = {};
      props.forEach((name) => {
        newObj[name] = obj[name];
      });

      return newObj;
    };
  }


  const handleXaxis = (i) => {
    if (i === 0 || i === 1) {
      return 1;
    } else if (i === 2 || i === 3) {
      return 3;
    } else if (i === 4) {
      return 6;
    } else {
      return 5;
    }
  };
  const handleYaxis = (i) => {
    if (i === 0 || i === 1) {
      return 1;
    } else if (i === 2 || i === 3) {
      return 3;
    } else if (i === 4) {
      return 6;
    } else if (i === 5) {
      return 0;
    } else {
      return 0;
    }
  };
  const validateTheValue = (args) => {
    const keys = Object.keys(args);
    const values = Object.values(args);
    const Index = values.findIndex((val) => val === "" || val === undefined);
    if (Index === -1) return undefined;
    return keys[Index];
  };
  const handleSerarch = async () => {
    const res = validateTheValue({
      location: lat,
      facing,
      length,
      breadth,
    });
    let layout = [];
    if (!res) {
        setLoaded(true);
      const results = await common.propertyFilters(Searchfilter);
      console.log("results", results);
      if (results.status === 200) {
        setSearchfilterData(results.data.data);
         setLoaded(false);
        const newEpisodes = results.data.data.map(
          selectProps("bedrooms", "livingRoom", "carparking", "setback", "dinning", "kitchen"),
        );
        for (const iterator of newEpisodes) {
          const { bedrooms, kitchen, livingRoom, carparking, setback, dinning } = iterator;
          layout = [...kitchen, ...bedrooms, ...livingRoom, ...carparking, ...setback, ...dinning];
        }

        let dynamiclayout = layout.map((value, i) => ({
          i: value.title,
          w: Math.round(value.breadth / 8),
          h: Math.round(value.length / 7),
          x: handleXaxis(i),
          y: handleYaxis(i),
          isDraggable: undefined,
          isResizable: undefined,
          maxH: undefined,
          maxW: 2,
          minH: undefined,
          minW: undefined,
          moved: false,
          static: false,
        }));
        console.log("dynamiclayout", dynamiclayout);
        setDynamiclayout(dynamiclayout);
      } else {
        message.error("something went wrong please try again");
      }
    } else {
      message.error("please fill the " + res);
    }
  };
  const handleSelect = (e) => {
    setSearchfilter({
      ...Searchfilter,
      facing: e,
    });
  };
  const handleinputChange = (e) => {
    const { name, value } = e.target;
    setSearchfilter({
      ...Searchfilter,
      [name]: Number(value),
    });
  };

  const hanldeobjectform = (planresinfo, val) => {
    for (const key in planresinfo) {
      if (key.substring(0, 3) === val.substring(0, 3)) {
        const element = planresinfo[key];
        return element;
      }
    }
  };
  const handlecost = (resource, measurements, { incomemeasurements }) => {
    console.log("resource", resource, measurements, incomemeasurements);
    const costdata = resource?.reduce(function (accumulator, item) {
      if (item.resourceType === "Work") {
        return accumulator + measurements * incomemeasurements * item.duration * 8 * item.cost;
      } else if (item.resourceType === "Material") {
        return accumulator + measurements * incomemeasurements * 1 * item.cost;
      }
    }, 0);
    const totalcost =
      costdata ??
      [].reduce(function (accumulator, item) {
        return accumulator + item;
      }, 0);

    return totalcost;
  };

  const handleSelectdata = (data) => {
    setPlanresinfo(data);
  };

  const handleplanlockchange = async () => {
    
    const firstleveldata = [];
    if (isdynamic) {
      let roomsarray = [];
      for (const iterator of dynamiclayout ?? []) {
        roomsarray.push({
          room: iterator.i,
          minsq: iterator.w * 8 * iterator.h * 7,
        });
      }

      const results = await common.EsatimationFilters(dynamiclayout);
      setLoaded(true);
      if (results.status === 200) {
        // handleSelectdata(results.data)

        for (const iterator of roomsarray) {
          firstleveldata.push({
            active: iterator.room,
            minsq: iterator.minsq,
            cost: handlecost(
              hanldeobjectform(results.data, iterator.room)?.resources ?? [],
              hanldeobjectform(results.data, iterator.room)?.measurements,
              {
                incomemeasurements:
                  iterator?.minsq / hanldeobjectform(results.data, iterator.room)?.minSqFeet,
              },
            ),
            duration: hanldeobjectform(results.data, iterator.room)?.estimationDays,
            subactivity: [
              {
                ...hanldeobjectform(results.data, iterator.room),
                incomemeasurements:
                  iterator?.minsq / hanldeobjectform(results.data, iterator.room)?.minSqFeet,
              },
            ],
          });
        }
        setLoaded(false);
        navigate("/price-details", { state: { dynamic: isdynamic } });
        const newdata = {
          dynamiclayout,
          searchfilterData: [],
          dynamicdata: firstleveldata,
        };
        dispatch(addplotdetails(newdata));
      }
    } else {
      navigate("/price-details", { state: { dynamic: isdynamic } });
      const data = {
        dynamiclayout,
        searchfilterData,
      };
      dispatch(addplotdetails(data));
    }

  };
  const antIcon = (
    <LoadingOutlined
      style={{
        fontSize: 24,
      }}
      spin
    />
  );

  console.log("loaded", loaded);
  return (
    <div>
      <div className="PdfViewer_conatiner">
        <div className="searchbar_content">
          <div className="searchbar">
            <div className="aaa">
              <GoogleAutoComplete
                placeholder={"Enter Location"}
                location={"location"}
                address={"address"}
                setSearchfilter={setSearchfilter}
              />
              <Divider type="vertical" />
            </div>
            <div className="aaa">
              <Select
                defaultValue="Property Facing"
                value={facing}
                style={{ width: 120 }}
                onChange={handleSelect}
              >
                <Option value={"East"}>East</Option>
                <Option value={"West"}>West</Option>
                <Option value={"South"}>South</Option>
                <Option value={"North"}>North</Option>
              </Select>
              <Divider type="vertical" />
            </div>
            <div className="aaa">
              <Input
                placeholder="Enter Length"
                name="length"
                value={length}
                onChange={handleinputChange}
              />
              <Divider type="vertical" />
            </div>
            <div className="aaa">
              <Input
                placeholder="Enter Breadth"
                name="breadth"
                value={breadth}
                onChange={handleinputChange}
              />
           
            </div>

            {/* <div className="aaa"> */}
            {/* <div className="select_storys">
              <Select defaultValue="No Of Storeys" style={{ width: 120 }} >
                <Option value="1">1</Option>
                <Option value="2">2</Option>
                <Option value="3">3</Option>
                <Option value="4">4</Option>
                <Option value="5">5</Option>
                <Option value="6">6</Option>
              </Select> */}
            {/* <Divider type="vertical" /> */}
            {/* </div> */}
            {/* </div> */}
            <div className="searchIcon" onClick={handleSerarch}>
              {loaded ? <Spin indicator={antIcon} /> : <SearchOutlined />}
            </div>
          </div>

          {/* <div className="filter_btn">
            <Button onClick={showDrawer}>Filter</Button>
          </div> */}
          <div className="middle">
            <Button className="btn" onClick={handleplanlockchange} loading={loaded}>
              <span className="wave"></span>
              <span className="text">
                Plan Lock <ArrowRightOutlined />
              </span>
            </Button>
          </div>
        </div>

        <div
          style={{
            display: visible ? "block" : "none",
          }}
          className="site-drawer-render-in-current-wrapper"
        >
          <Drawer
            placement="top"
            closable={false}
            onClose={onClose}
            visible={visible}
            getContainer={false}
            style={{
              position: "absolute",
            }}
          >
            <FilterDetails onClose={onClose} />
          </Drawer>
        </div>
        <Demo
          dynamiclayout={dynamiclayout}
          setDynamiclayout={setDynamiclayout}
          setIsdynamic={setIsdynamic}
        />
      </div>
    </div>
  );
};

export default PdfViewer;
